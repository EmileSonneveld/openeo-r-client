% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/udf.R
\name{send_udf}
\alias{send_udf}
\title{Test a UDF operation}
\usage{
send_udf(
  data,
  code,
  host = "http://localhost",
  port = NULL,
  language = "R",
  debug = FALSE,
  download_info = FALSE
)
}
\arguments{
\item{data}{file path or a list object with the UDF-API data object}

\item{code}{a call object or a file path of the user defined code}

\item{host}{URL to the UDF service}

\item{port}{optional port of the UDF service host}

\item{language}{programming language (R or Python) of the source code}

\item{debug}{(optional) logical. Switch on / off debugging information for time taken}

\item{download_info}{(optional) logical. Whether or not to print the time taken separately for 
the download}
}
\value{
the textual JSON representation of the result
}
\description{
This function is a testing function for UDF requests against a UDF service. If an 
openEO UDF service is available (external via an URL or a local setup) and if you can obtain 
sample data that fit the context of your UDF use case, you can use this function to send the 
code and the data to the UDF service. Depending on the state of the service (error or success)
you can debug your code.
}
\details{
If you use a local R UDF service you might want to debug using the 'browser()' function.
}
\note{
The debug options are only available for the R-UDF service.
}
\examples{
\dontrun{
port = 5555
host = "http://localhost" 
script = quote({
  all_dim = names(dim(data))
  ndvi_result = st_apply(data, FUN = function(X,...) {
    (X[8]-X[4])/(X[8]+X[4])
  }, MARGIN = all_dim[-which(all_dim=="band")])

  all_dim = names(dim(ndvi_result))
  min_ndvi = st_apply(ndvi_result,FUN = min, MARGIN = all_dim[-which(all_dim=="t")])

  min_ndvi
})
result = send_udf(data = "hypercube.json",code = script,host=host,port=port)

}
}
